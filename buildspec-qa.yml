version: 0.2

env:
  secrets-manager:
  #AI Bot
    API_KEY: "arn:aws:secretsmanager:us-east-2:339713008336:secret:prof/EBEREGIT/app-2aG1t8"
    #SonarCloud
    LOGIN: "arn:aws:secretsmanager:us-east-2:339713008336:secret:qa/AIBot/SonarCloud-TPr0ry:sonartoken"
    HOST: "arn:aws:secretsmanager:us-east-2:339713008336:secret:qa/AIBot/SonarCloud-TPr0ry:HOST"
    Organization: "arn:aws:secretsmanager:us-east-2:339713008336:secret:qa/AIBot/SonarCloud-TPr0ry:Organization"
    Project: "arn:aws:secretsmanager:us-east-2:339713008336:secret:qa/AIBot/SonarCloud-TPr0ry:Project"
    #NVD - Dependency Check
    NVD_API_KEY: "arn:aws:secretsmanager:us-east-2:339713008336:secret:qa/AIBot/DependencyCheck-gU8EYi:NVD_API_KEY"

phases:
  install:
    runtime-versions:
      nodejs: 20
      java: corretto17
    commands:
      - echo "Installing dependencies..."
      - apt-get update
      - apt-get install -y openjdk-17-jdk
      - update-alternatives --install /usr/bin/java java /usr/lib/jvm/java-17-openjdk-amd64/bin/java 1
      - update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java
      - export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
      - export PATH=$JAVA_HOME/bin:$PATH
      - java -version
      - echo "Installing OWASP Dependency-Check..."
      - wget https://github.com/jeremylong/DependencyCheck/releases/download/v9.2.0/dependency-check-9.2.0-release.zip
      - unzip dependency-check-9.2.0-release.zip -d /opt
      - ln -s /opt/dependency-check/bin/dependency-check.sh /usr/local/bin/dependency-check

  pre_build:
    commands:
      - echo "Setting up SonarQube Scanner..."
      - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
      - unzip sonar-scanner-cli-5.0.1.3006-linux.zip -d .

  build:
    commands:
      - echo "Running build script..."
      - cd frontend
      - npm install
      - npm run build
      - cd ..
      - echo "Running OWASP Dependency-Check..."
      - mkdir -p reports
      - /opt/dependency-check/bin/dependency-check.sh --project "MyProject" --format "ALL" --out reports --scan . --nvdApiKey $NVD_API_KEY
      - echo "Running SonarQube Scanner..."
      - export PATH=$(pwd)/sonar-scanner-5.0.1.3006-linux/bin:$PATH
      - sonar-scanner -Dsonar.projectKey=$Project -Dsonar.organization=$Organization -Dsonar.host.url=$HOST -Dsonar.login=$LOGIN -Dsonar.exclusions=reports/**

  post_build:
    commands:
      - echo "Uploading reports to S3..."
      - aws s3 cp reports/dependency-check-report.html s3://cod-devsecops-ai-bot-reports/dependency-check-report.html
      - aws s3 cp reports/dependency-check-report.xml s3://cod-devsecops-ai-bot-reports/dependency-check-report.xml
      - aws s3 cp reports/dependency-check-report.json s3://cod-devsecops-ai-bot-reports/dependency-check-report.json
      - aws s3 cp sonar-report.html s3://cod-devsecops-ai-bot-reports/sonar-report.html
      - if [ -f sonar-report.html ]; then aws s3 cp sonar-report.html s3://cod-devsecops-ai-bot-reports/sonar-report.html; else echo "Sonar report not found, skipping upload"; fi

artifacts:
  files:
    - backend/**/*
    - frontend/dist/**/*
    - frontend/public/**/*
    - frontend/src/**/*
    - frontend/package.json
    - appspec.yml
    - scripts/**/*
    - reports/dependency-check-report.html
    - reports/dependency-check-report.xml
    - reports/dependency-check-report.json
